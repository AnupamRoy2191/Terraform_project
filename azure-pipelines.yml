trigger:
- main

parameters:

# - name: Environment
#   displayName: Select environment to create infra resources
#   type: string
#   values:
#     - uat
#     - prod

- name: Action
  displayName: Select Action - Apply or destroy resources
  type: string
  values:
    - apply
    - destroy

variables:
    - group: terraform-secrets

stages:
  - stage: TerraformApplyDeploymentBackendResource
    displayName: Terraform plan deployment backend resource
    condition: eq('${{ parameters.action }}', 'apply')
    jobs:
      - job: init_plan_apply
        displayName: Terraform plan deployment for backend storage account
        pool: default
        steps:
          - checkout: self
          - script: |
              cd backend-storage-account
              terraform init
              terraform validate
              terraform plan
            displayName: 'Terraform plan deployment for backend storage account'
            env:
              ARM_CLIENT_ID: $(ARM_CLIENT_ID)
              ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
              ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
              ARM_TENANT_ID: $(ARM_TENANT_ID)

      - job: apply
        displayName: Terraform deployment for backend storage account
        pool: default
        dependsOn: init_plan_apply
        condition: succeeded()
        steps:
          - checkout: self
          - script: |
              cd backend-storage-account
              terraform init
              terraform apply -auto-approve
            displayName: 'Terraform deployment for backend storage account'
            env:
              ARM_CLIENT_ID: $(ARM_CLIENT_ID)
              ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
              ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
              ARM_TENANT_ID: $(ARM_TENANT_ID)

  - stage: TerraformDestroyDeploymentBackendResource
    displayName: Terraform destroy deployment backend resource
    condition: eq('${{ parameters.action }}', 'destroy')
    jobs:
      - job: destroy
        displayName: Terraform destroy deployment for backend storage account
        pool: default
        steps:
          - checkout: self
          - script: |
              cd backend-storage-account
              terraform init
              terraform plan
              terraform destroy -auto-approve
            displayName: 'Terraform deployment for backend storage account'
            env:
              ARM_CLIENT_ID: $(ARM_CLIENT_ID)
              ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
              ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
              ARM_TENANT_ID: $(ARM_TENANT_ID)



  # - stage: TerraformInitPlan
  #   displayName: Terraform Init & Plan
  #   jobs:
  #     - job: init_plan
  #       displayName: Terraform Init & Plan
  #       pool: default
  #       steps:
  #         - checkout: self
  #         - script: |
  #             terraform init
  #             terraform workspace select ${{ parameters.environment }} || terraform workspace new ${{ parameters.environment }}
  #             terraform plan -var-file=envs/"${{ parameters.environment }}/${{ parameters.environment }}-vars.tfvars" -out=tfplan
  #           displayName: 'Terraform Init & Plan'

  # - stage: TerraformApply
  #   displayName: Terraform Apply
  #   dependsOn: TerraformInitPlan
  #   condition: succeeded()
  #   jobs:
  #     - job: apply
  #       displayName: Terraform Apply
  #       pool: self-host-agent
  #       steps:
  #         - checkout: self

  #         - task: UsePythonVersion@0
  #           inputs:
  #             versionSpec: '3.x'

  #         - task: TerraformInstaller@1
  #           inputs:
  #             terraformVersion: '1.5.7'

  #         - script: |
  #             terraform init
  #             terraform workspace select ${{ parameters.environment }}
  #             terraform apply -auto-approve tfplan
  #           displayName: 'Terraform Apply'

  # - stage: TerraformDestroy
  #   displayName: Terraform Destroy
  #   condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'main'))
  #   jobs:
  #     - job: destroy
  #       displayName: Terraform Destroy
  #       pool: self-host-agent
  #       steps:
  #         - checkout: self

  #         - task: UsePythonVersion@0
  #           inputs:
  #             versionSpec: '3.x'

  #         - task: TerraformInstaller@1
  #           inputs:
  #             terraformVersion: '1.5.7'

  #         - script: |
  #             terraform init
  #             terraform workspace select ${{ parameters.environment }}
  #             terraform destroy -auto-approve -var-file="${{ parameters.environment }}.tfvars"
  #           displayName: 'Terraform Destroy'
